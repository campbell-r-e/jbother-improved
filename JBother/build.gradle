plugins {
    id 'java'
    id 'application'
    id 'edu.sc.seis.launch4j' version '2.5.4'
}

group = 'com.valhalla'
version = '1.0'

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

application {
    mainClass = 'com.valhalla.jbother.JBother'
}

repositories {
    mavenCentral()
    maven { url "https://maven2.infonode.net/" } // Not required if IDW is local
}

dependencies {
    implementation 'org.igniterealtime.smack:smack:3.1.0'
    //implementation 'net.infonode:idw:1.6.1' // if you can pull from maven
    // If not, use local jar:
    implementation files('lib/idw.jar')
}

jar {
    archiveBaseName.set("JBother")

    manifest {
        attributes(
            'Main-Class': application.mainClass
        )
    }

    from('src/resources/images') { into 'images' }
    from('src/resources/sounds') { into 'sounds' }
    from('src/resources/imagethemes') { into 'imagethemes' }
    from('src/resources/translations') { into 'translations' }

    from('CREDITS') { rename { 'credits.txt' } }
    from('build.number') { rename { 'buildid.properties' } }
    from('src/resources/defaultsettings.properties')
    from('src/resources/kiosksettings.properties')
}

tasks.withType(JavaCompile).configureEach {
    options.deprecation = true
    options.debug = true
}

tasks.register('fatJar', Jar) {
    archiveBaseName.set('JBother')
    archiveClassifier.set('all')
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    includeEmptyDirs = false
    preserveFileTimestamps = false

    manifest {
        attributes 'Main-Class': application.mainClass
    }

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    with tasks.named("jar").get()
}

launch4j {
    mainClassName = application.mainClass
    outputDir = "$buildDir/launch4j"
    outfile = 'JBother.exe'
    jreMinVersion = '1.4.0'
    dontWrapJar = false
}

tasks.named("createExe").configure {
    dependsOn(tasks.named("fatJar"))
    doFirst {
        def fatJarFile = tasks.named("fatJar").get().archiveFile.get().asFile
        project.launch4j.jar = fatJarFile.absolutePath
    }
}
